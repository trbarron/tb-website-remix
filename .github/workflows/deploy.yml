name: üöÄ Deploy

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
    inputs:
      run_lint:
        description: 'Run ESLint check'
        required: true
        type: boolean
        default: false
      run_typecheck:
        description: 'Run TypeScript check'
        required: true
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

defaults:
  run:
    shell: bash

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload to S3
        run: |
          aws s3 sync posts/ s3://${{ secrets.AWS_BUCKET_NAME }}/posts/

  lint:
    name: ‚¨£ ESLint
    runs-on: ubuntu-latest
    if: github.event.inputs.run_lint == 'true'
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: üì• Install deps
        run: npm install

      - name: üî¨ Lint
        run: npm run lint

  typecheck:
    name:  ¶ TypeScript
    runs-on: ubuntu-latest
    if: github.event.inputs.run_typecheck == 'true'
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: üì• Install deps
        run: npm install

      - name: üîé Type check
        run: npm run typecheck --if-present

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          architecture: x64

      - name: üëÄ Env
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Git ref:    ${{ github.ref }}"
          echo "GH actor:   ${{ github.actor }}"
          echo "SHA:        ${{ github.sha }}"
          VER=`node --version`; echo "Node ver:   $VER"
          VER=`npm --version`; echo "npm ver:    $VER"

      - name: üì• Install deps
        run: |
          rm -rf node_modules
          npm cache clean --force
          npm install --production
          npm rebuild

      - name: üì¶ Install Build Tools
        run: |
          npm install -g esbuild
          npm install -g @architect/architect

      - name: üèó Build
        run: |
          npm run build
          echo "Build directory contents:"
          ls -la public/build/
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: üõ† Prepare Server
        run: |
          # Create server directory
          mkdir -p server
          
          # Copy build files
          cp build/index.js server/index.js || echo "No server build found"
          
          # Create minimal package.json for server
          echo '{
            "type": "module",
            "dependencies": {}
          }' > server/package.json
          
          # Install only production dependencies in server
          cd server
          npm i --omit=dev --no-package-lock
          
          # Remove unnecessary files from node_modules
          find node_modules -type d -name "test" -exec rm -rf {} +
          find node_modules -type d -name "tests" -exec rm -rf {} +
          find node_modules -type d -name "docs" -exec rm -rf {} +
          find node_modules -type f -name "*.md" -delete
          find node_modules -type f -name "*.d.ts" -delete
          find node_modules -type f -name "LICENSE*" -delete
          find node_modules -type f -name "README*" -delete
          
          cd ..
          
          # Debug: Show directory structure
          echo "Server directory contents:"
          ls -la server/
          echo "Build directory contents:"
          ls -la public/build/

      - name: üì¶ Optimize Server Bundle
        run: |
          npx esbuild server/index.js \
            --bundle \
            --platform=node \
            --target=node18 \
            --minify \
            --tree-shaking=true \
            --outfile=server/index.optimized.js
          mv server/index.optimized.js server/index.js

      - name: üìè Check Lambda Size
        run: |
          MAX_SIZE_MB=5
          LAMBDA_SIZE_KB=$(du -k server/ | cut -f1)
          LAMBDA_SIZE_MB=$((LAMBDA_SIZE_KB / 1024))
          echo "Lambda size: ${LAMBDA_SIZE_MB}MB"
          if [ $LAMBDA_SIZE_MB -gt $MAX_SIZE_MB ]; then
            echo "Warning: Lambda size exceeds ${MAX_SIZE_MB}MB threshold"
            echo "Largest dependencies:"
            du -h server/node_modules/* | sort -rh | head -n 10
          fi

      - name: üöÄ Production Deploy
        if: github.ref == 'refs/heads/master'
        run: |
          arc deploy --production --prune --verbose
        env:
          CI: true
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          GA_TRACKING_ID: ${{ secrets.GA_TRACKING_ID }}